
const { Sequelize, DataTypes } = require("sequelize");
const sequelize = require("../database/db");


const conversations = sequelize.define("conversations", {
    id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true
    },
    subject: {
        type: DataTypes.STRING,
        allowNull: false
    },
    createdAt: {
        type: DataTypes.DATE,
        defaultValue: Sequelize.literal('NOW()')
    },
    updatedAt: {
        type: DataTypes.DATE,
        defaultValue: Sequelize.literal('NOW()')
    },
},
{
    freezeTableName: true
});



sequelize
    .sync({ force: true})
    .then(() => {
        console.log("Conversations table created successfully");
    })
    .catch(error => {
        console.error("Error creating Conversations table:", error);
    });


module.exports = conversations;

const User = require('./other');
const { Sequelize, DataTypes } = require('sequelize');
const sequelize = require('../database/db');
const createTableIfNotExists = require('../utils/createTableIfNotExists');

const matches = sequelize.define("matches", {
    id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true
    },
    user1Id: {
        type: DataTypes.INTEGER,
        references: {
            model: "User",
            key: "id"
        }
    },
    user2Id: {
        type: DataTypes.INTEGER,
        references: {
            model: "User",
            key: "id"
        }
    },
    status: {
        type: DataTypes.ENUM,
        values: ["pending", "accepted", "rejected"]
    },
    createdAt: {
        type: DataTypes.DATE,
        defaultValue: Sequelize.literal('NOW()')
    },
    updatedAt: {
        type: DataTypes.DATE,
        defaultValue: Sequelize.literal('NOW()')
    },
},
{ freezeTableName: true });


matches.belongsTo(User, {
    foreignKey: "user1Id",
    as: "user1"
});

matches.belongsTo(User, {
    foreignKey: "user2Id",
    as: "user2"
});

sequelize
    .sync({ force: true})
    .then(() => {
        console.log("Matches table created successfully");
    })
    .catch(error => {
        console.error("Error creating Matches table:", error);
    });

//createTableIfNotExists("Matches", Matches);

module.exports = matches;

const { Sequelize, DataTypes } = require("sequelize");
const sequelize = require("../database/db");
const createTableIfNotExists = require("../utils/createTableIfNotExists");


const media = sequelize.define("media", {
    id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true
    },
    type: {
        type: DataTypes.ENUM,
        values: ["text", "image", "file", "location", "camera selfie", "audio"],
        allowNull: false
    },
    url: {
        type: DataTypes.STRING
    },
    createdAt: {
        type: DataTypes.DATE,
        defaultValue: Sequelize.literal("NOW()")
    },
    updatedAt: {
        type: DataTypes.DATE,
        defaultValue: Sequelize.literal("NOW()")
    },
},
    { freezeTableName: true
});

sequelize
    .sync({ force: true})
    .then(() => {
        console.log("Media table created successfully");
    })
    .catch(error => {
        console.error("Error creating Media table:", error);
    });

//createTableIfNotExists("Media", Media);

module.exports = media;

const user = require("./other");
const { Sequelize, DataTypes } = require("sequelize");
const sequelize = require("../database/db");
const createTableIfNotExists = require("../utils/createTableIfNotExists");
const media = require("./media");


const message = sequelize.define("message", {
    id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true
    },
    content: {
        type: DataTypes.TEXT,
        allowNull: false
    },
    type: {
        type: DataTypes.ENUM,
        values: ["text", "image", "file", "location", "camera_selfie", "audio"],
        allowNull: false
    },
    createdAt: {
        type: DataTypes.DATE,
        defaultValue: Sequelize.literal('NOW()')
    },
    updatedAt: {
        type: DataTypes.DATE,
        defaultValue: Sequelize.literal('NOW()')
    }

},
{
    freezeTableName: true
});



sequelize
    .sync({ force: true})
    .then(() => {
        console.log("Message table created successfully");
    })
    .catch(error => {
        console.error("Error creating Message table:", error);
    });

//createTableIfNotExists('Message', Message);

module.exports = message;

const { Sequelize, DataTypes } = require("sequelize");
const sequelize = require("../database/db");
const bcrypt = require("bcrypt");


const other = sequelize.define("user", {
        id: {
            type: DataTypes.INTEGER,
            primaryKey: true,
            autoIncrement: true
        },
        name: {
            type: DataTypes.STRING,
            allowNull: false
        },
        email: {
            type: DataTypes.STRING,
            unique: true,
            allowNull: false
        },
        password: {
            type: DataTypes.STRING,
            allowNull: false,
            set(value) {
                this.setDataValue('password', bcrypt.hashSync(value, 10));
            }
        },
        profilePictureId: {
            type: DataTypes.INTEGER,
            references: {
                model: "Picture",
                key: "id"
            }
        },
        dateOfBirth: {
            type: DataTypes.DATEONLY
        },

        gender: {
            type: DataTypes.STRING,
            value: [
                'male',
                'female',
                'other'
            ],
            validate: {
                isIn: {
                    args: [[
                        'male',
                        'female',
                        'other'
                    ]],
                    msg: 'Invalid gender'
                }
            }
        },

        occupation: {
            type: DataTypes.STRING
        },
        aboutMe: {
            type: DataTypes.TEXT
        },
        smokingStatus: {
            type: DataTypes.STRING,
            value: [
                'smoker',
                'non-smoker',
                'occasional smoker',
                'social smoker'
            ],
            validate: {
                isIn: {
                    args: [['smoker', 'non-smoker', 'occasional smoker', 'social smoker']],
                    msg: 'Invalid smoking status'
                }
            }
        },

        drinkingStatus: {
            type: DataTypes.STRING,
            value: [
                'drinker',
                'non-drinker',
                'occasional drinker',
                'social drinker',
                'light drinker',
                'heavy drinker'
            ],

            validate: {
                isIn: {
                    args: [['drinker', 'non-drinker', 'occasional drinker', 'social drinker', 'light drinker', 'heavy drinker']],
                    msg: 'Invalid drinking status'
                }
            }
        },

        housingStatus: {
            type: DataTypes.STRING,
            value: [
                'have a place',
                'don\'t have a place',
            ]
        },
        moveInDate: {
            type: DataTypes.DATEONLY
        },
        budget: {
            type: DataTypes.INTEGER
        },
        createdAt: {
            type: DataTypes.DATE,
            defaultValue: Sequelize.literal('NOW()')
        },
        updatedAt: {
            type: DataTypes.DATE,
            defaultValue: Sequelize.literal('NOW()')
        },
    },

    {
        freezeTableName: true
    });

/*const Matches = require("./matches");
const Media = require("./media");
const Message = require("./message");
const Picture = require("./picture");


other.hasMany(Matches, {
    foreignKey: 'userId',
    as: 'matches',
});

other.hasMany(Media, {
    foreignKey: 'userId',
    as: 'media',
});

other.hasOne(Message, {
    foreignKey: 'userId',
    as: 'message',
});

other.hasMany(Picture, {
    foreignKey: 'userId',
    as: 'picture',
});*/

sequelize
    .sync({ force: true})
    .then(() => {
        console.log("User table created successfully");
    })
    .catch(error => {
        console.error("Error creating User table:", error);
    });

module.exports = other;

const User = require("./other");
const { DataTypes, Sequelize } = require("sequelize");
const sequelize = require("../database/db");
const createTableIfNotExists = require("../utils/createTableIfNotExists");

const picture = sequelize.define("picture", {
    id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true
    },
    userId: {
        type: DataTypes.INTEGER,
        references: {
            model: User,
            key: "id"
        },
        onUpdate: "cascade",
        onDelete: "cascade"
    },
    pictureUrl: {
        type: DataTypes.STRING,
        allowNull: false
    },
    isMain: {
        type: DataTypes.BOOLEAN,
        defaultValue: false
    },
    createdAt: {
        type: DataTypes.DATE,
        defaultValue: Sequelize.literal('NOW()')
    },
    updatedAt: {
        type: DataTypes.DATE,
        defaultValue: Sequelize.literal('NOW()')
    },
},
    {
        freezeTableName: true
});



sequelize
    .sync({ force: true})
    .then(() => {
        console.log("Picture table created successfully");
    })
    .catch(error => {
        console.error("Error creating Picture table:", error);
    });

//createTableIfNotExists("Picture", Picture);


module.exports = picture;


const bcrypt = require('bcrypt');
const SALT_ROUNDS = 10;
const Sequelize = require('sequelize');

module.exports = (sequelize, DataTypes) => {
    const User = sequelize.define('User', {
        id: {
            type: Sequelize.INTEGER,
            primaryKey: true,
            autoIncrement: true
        },
        firstName: Sequelize.STRING,
        lastName: Sequelize.STRING,
        email: Sequelize.STRING,
        password: Sequelize.STRING,
        dateOfBirth: Sequelize.DATE,
        profilePictureId: {
            type: Sequelize.INTEGER,
            references: {
                model: "Picture",
                key: "id"
            }
        },
        occupation: Sequelize.STRING,
        aboutMe: Sequelize.TEXT,
        moveInDate: Sequelize.DATEONLY,
        budget: Sequelize.INTEGER,
        createdAt: {
            type: Sequelize.DATE,
            defaultValue: Sequelize.literal('NOW()')
        },
        updatedAt: {
            type: DataTypes.DATE,
            defaultValue: Sequelize.literal('NOW()')
        },
    }, {});

    User.beforeCreate(async (user, options) => {
        user.password = await bcrypt.hash(user.password, SALT_ROUNDS);
    });

    User.associate = function(models) {
        models.Picture = require('./picture.js')(sequelize, DataTypes);
        User.belongsTo(models.Picture, {
            foreignKey: 'profilePictureId',
            targetKey: 'id',
            as: 'picture'
        });
    };

    return User;
};


'use strict';
const Sequelize = require("sequelize");
/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    await queryInterface.createTable('Users', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER
      },
      firstName: {
        type: Sequelize.STRING
      },
      lastName: {
        type: Sequelize.STRING
      },
      email: {
        type: Sequelize.STRING
      },
      password: Sequelize.STRING,
      dateOfBirth: Sequelize.DATE,
      profilePictureId: {
        type: Sequelize.INTEGER,
        references: {
          model: "Picture",
          key: "id"
        }
      },
      occupation: Sequelize.STRING,
      aboutMe: Sequelize.TEXT,
      moveInDate: Sequelize.DATEONLY,
      budget: Sequelize.INTEGER,
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE
      }
    });
  },
  async down(queryInterface, Sequelize) {
    await queryInterface.dropTable('Users');
  }
};

'use strict';
/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    await queryInterface.createTable('Pictures', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER
      },
      pictureUrl: {
        type: Sequelize.STRING
      },
      isMain: {
        type: Sequelize.BOOLEAN,
        defaultValue: false
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE
      }
    });
  },
  async down(queryInterface, Sequelize) {
    await queryInterface.dropTable('Pictures');
  }
};

'use strict';

const {
  Model
} = require('sequelize');

const Sequelize = require("sequelize");

module.exports = (sequelize, DataTypes) => {
  class Picture extends Model {
    static associate(models) {
      /*models.User = require('./user')(sequelize, DataTypes);
      Picture.belongsTo(models.User, {
        foreignKey: "userId",
        as: "user"
      });*/
    }
  }
  Picture.init({
    pictureUrl: Sequelize.STRING,
  }, {
    sequelize,
    modelName: 'Picture',
  });
  return Picture;
};



drinkingStatus, smokingStatus, housingStatus, gender: These are reference tables that store specific options, and they can be created first.

Media: If the Media table has no references to any other tables, it can be created next.

Picture: If the Picture table has a reference to the User table, it should be created after the User table.

Users: The Users table references the Picture, drinkingStatus, smokingStatus, housingStatus, and gender tables, so it should be created after these tables are created.

Conversations: If the Conversations table has references to the Users table, it should be created after the Users table.

Matches: If the Matches table has references to the Users table, it should be created after the Users table.

Messages: If the Messages table has references to the Users and Conversations tables, it should be created after these tables are created.